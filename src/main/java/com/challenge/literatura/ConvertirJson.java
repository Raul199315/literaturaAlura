package com.challenge.literatura;

import com.challenge.literatura.servicio.ConsumoApi;
import org.springframework.stereotype.Component;

import java.util.Scanner;

@Component
public class ConvertirJson {
    private final ConsumoApi consumoApi;
    private boolean bandera = true;
    private final String funcionBuscar = "search=";
    private final String funcionBuscarIdioma = "languages=";

    private final Scanner teclado = new Scanner(System.in);

    public ConvertirJson(ConsumoApi consumoApi) {
        this.consumoApi = consumoApi;
    }

    public void menu() {
        while (bandera) {
            System.out.println("""
               ********************************************
                MEN√ö PRINCIPAL
               
               1Ô∏è Buscar un libro en la API
               2Ô∏è Lista de libros registrados
               3 Lista de autores registrados
               4Ô∏è Autores vivos en determinado a√±o
               5Ô∏è Lista de libros por idioma
               6Ô∏è Salir
               """);

            String entrada = teclado.nextLine().trim();
            int opcion = -1;

            try {
                opcion = Integer.parseInt(entrada);
            } catch (NumberFormatException e) {
                System.out.println(" Opci√≥n inv√°lida. Por favor ingresa un n√∫mero.");
                continue;
            }

            switch (opcion) {
                case 1 -> buscarLibro();
                case 2 -> consumoApi.mostrarLibrosGuardados();
                case 3 -> consumoApi.mostrarAutoresConCantidadDeLibrosYTitulos();
                case 4 -> consumoApi.pedirYMostrarAutoresVivosDesdeConsola();
                case 5 -> consumoApi.pedirYMostrarLibrosPorIdioma();
                case 6 ->
                {
                    System.out.println("üëã Saliendo... ¬°Gracias por usar el sistema!");
                    bandera = false;
                }
                default -> System.out.println("‚ö†Ô∏è Opci√≥n no reconocida.");
            }
        }
    }

    private void buscarLibro() {
        System.out.println("""
                üîç Buscar por:
                1Ô∏è T√≠tulo del libro o nombre de autor
                2Ô∏è Idioma del libro
                3Ô∏è Volver al men√∫ anterior
                """);

        String entrada = teclado.nextLine().trim();
        int subOpcion = -1;

        try {
            subOpcion = Integer.parseInt(entrada);
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Entrada inv√°lida.");
            return;
        }

        switch (subOpcion) {
            case 1 -> {
                System.out.print(" Ingresa el t√≠tulo o autor: ");
                String nombre = teclado.nextLine();
                consumoApi.consumo(nombre, funcionBuscar);
            }
            case 2 -> {
                System.out.println("""
                         Idiomas disponibles:
                        es - Espa√±ol
                        en - Ingl√©s
                        fr - Franc√©s
                        de - Alem√°n
                        it - Italiano
                        pt - Portugu√©s
                        """);
                System.out.print("Ingresa el c√≥digo del idioma: ");
                String idioma = teclado.nextLine();
                consumoApi.consumo(idioma, funcionBuscarIdioma);
            }
            case 3 -> System.out.println("‚Ü©Ô∏è Volviendo al men√∫ principal...");
            default -> System.out.println("‚ö†Ô∏è Opci√≥n no v√°lida.");
        }
    }

    private void mostrarLibrosPorIdioma() {
        System.out.println("‚ö†Ô∏è Esta opci√≥n a√∫n no est√° implementada.");
    }
}